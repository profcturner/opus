#!/bin/sh -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

case "$1" in
    configure)
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# We didn't always use dbconfig-common, this tells OPUS what version
# we changed at, and how to read the old database
dbc_first_version='4.0.0'
# This PHP script just reads the old config file and maps it to dbconfig-common
dbc_load_include='php:/usr/share/opus/include/load-old-database.php'

# Source debconf library.
. /usr/share/debconf/confmodule

# source dbconfig-common stuff
. /usr/share/dbconfig-common/dpkg/postinst.mysql 
# generate a PHP config file we can read to get the database credentials
dbc_generate_include_owner=root:www-data
dbc_generate_include_perms=640
dbc_generate_include=php:/etc/opus/opus-database.php
dbc_go opus $@

# The main event
if [ "$1" = "configure" ]
then
  echo "Writing debconf configuration ..."
  # Remove any existing debconf config
  if [ -e /etc/opus/debconf_config.php ]
  then
    rm /etc/opus/debconf_config.php
  fi
  # Write the debconf recorded values to config.php insert
  touch /etc/opus/debconf_config.php
  echo "<?php"  >>  /etc/opus/debconf_config.php
  echo "// DO NOT EDIT THIS FILE, it is automatically generated from debconf"  >> /etc/opus/debconf_config.php
  echo "// Use dpkg-reconfigure -p low opus to regenerate this file" >> /etc/opus/debconf_config.php
  db_get opus/fq_hostname
  echo "\$config['opus']['url']= 'http://$RET/opus';" >> /etc/opus/debconf_config.php
  echo "\$config['opus']['real_url']= 'http://$RET';" >> /etc/opus/debconf_config.php
  db_get opus/institution
  echo "\$config['opus']['institution'] = '$RET';" >> /etc/opus/debconf_config.php
  db_get opus/cookie_host
  echo "\$config['waf']['cookie_host'] = '$RET';" >> /etc/opus/debconf_config.php
  db_get opus/cookie_secret
  echo "\$config['waf']['cookie_secret'] = '$RET';" >> /etc/opus/debconf_config.php
  echo "?>" >>  /etc/opus/debconf_config.php
  # Ensure sensible permissions
  chown www-data:root /etc/opus/*.php
  chmod 640 /etc/opus/*.php

  # set permissions on other dirs
  echo "Creating paths and setting permissions ..."
  chown www-data:root /var/lib/opus/photos
  chown www-data:root /var/lib/opus/resources
  chown -R www-data:root /var/lib/opus
  chmod 770 /var/lib/opus/photos
  chmod 770 /var/lib/opus/resources
  chmod 770 /var/lib/opus/templates_*
  chmod 770 /var/lib/opus/sessions

  # Check for old (incorrect) pathnames in use
  if [ -d /usr/share/opus/resources ]
  then
    echo "old resources path found, moving to new path..."
    mv /usr/share/opus/resources/* /var/lib/opus/resources
    rmdir /usr/share/opus/resources/
  fi
  if [ -d /usr/share/opus/photos ]
  then
    echo "old photos path found, moving to new path..."
    mv /usr/share/opus/photos/* /var/lib/opus/photos
    rmdir /usr/share/opus/photos/
  fi

  # Install a symlink from the config file to the /etc directory
  if [ ! -e /usr/share/opus/include/local.conf.php ]
  then
    echo "Installing initial OPUS configuration..."
    ln -s /etc/opus/opus-local.config.php /usr/share/opus/include/local.conf.php
  fi

  # Ensure log file stubs are present, have the right ownership and permissions
  chown www-data:root /var/log/opus
  chmod 770 /var/log/opus
  if [ ! -e /var/log/opus/general.log ]; then touch /var/log/opus/general.log; fi
  if [ ! -e /var/log/opus/cron.log ]; then touch /var/log/opus/cron.log; fi
  if [ ! -e /var/log/opus/security.log ]; then touch /var/log/opus/security.log; fi
  if [ ! -e /var/log/opus/admin.log ]; then touch /var/log/opus/admin.log; fi
  if [ ! -e /var/log/opus/debug.log ]; then touch /var/log/opus/debug.log; fi
  if [ ! -e /var/log/opus/panic.log ]; then touch /var/log/opus/panic.log; fi
  chown www-data:root /var/log/opus/*
  chmod 770 /var/log/opus/*

  # set permissions on opus executable, and symlink it to "opus"
  chmod 700 /usr/share/opus/cron/opus.php
  if [ ! -e /usr/sbin/opus ]
  then
    ln -s /usr/share/opus/cron/opus.php /usr/sbin/opus
  fi

  # Install the apache2 configuration if required
  if [ -e /etc/apache2/ ] && [ ! -e /etc/apache2/conf.d/opus.conf ]
  then
    echo "Installing OPUS apache2 configuration..."
    ln -s /etc/opus/apache2.conf /etc/apache2/conf.d/opus.conf
  fi

  # If Apache 2 is running restart it, important in case folks are using apache1
  # TODO would be nice to support alternative web servers at some point
  if [ -e /var/run/apache2.pid ]
  then
    echo "Restarting web server..."
    apache2ctl restart
  else
    echo "Warning: Apache2 web server is not running, you may have to resolve this manually..."
  fi

fi

# Now for debhelper deep magic
# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
